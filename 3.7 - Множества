Множество (set) - неупорядоченный (нельзя обратиться к элементу по его индексу; нельзя добавить элемент в множество на определенную позицию) коллекционный тип данных, 
который хранит только уникальные данные

Множество (set) - изменяемый
Неизменяемые множество (frozenset) - неизменяемый

Создание множества:
1) s = set() - пустое множество
2) s = set([1, 2, 3, 4, 3, 4]) - можно указать любой итеррируемый объект, например s = set("Колокол") - {'о', 'л', 'К', 'к'}
print(s)  # {1, 2, 3, 4}
3) s1 = {'4', 'WOW'} - только для изменяемого множества

Методы для множеств:
Получение количества элементов в множестве - len(set)
Добавление и удаление элементов - myset.add(x)
Проверка на членство в множестве - x in set
Проверка на нечленство в множестве x not in set
Возврат минимального или максимального значения множества - max(set), min(set)
Возвратить новое множество с поверхностной копией множества s - s.copy()
Равны ли множества можно понять так: s == s1  # True or False
Убедиться что множества не имеют никаких общих элементов можно через метод - s1.isdisjoint(s2)
Можно сравнивать на вхождение множества через методы или операции сравнения >, <, <= и т.д.
Объединение множеств s|s1 - s2 = s.union(s1)
Пересечение множеств s&s1 - s2 = s.intersection(s1)
Разность множеств s-s1 - s2 = s.difference(s1)
Симметричная разность множеств s^s1 - s2 = s.symmetric_difference(s1)
============================================
Добавление и удаление элементов, например для множества s = {1, 2, 3}
Добавить элемент - myset.add(4)  # {1, 2, 3, 4}
Добавить группу элементов - myset.update([3, 4, 5])  # {1, 2, 3, 4, 5}
Удалить элемент или понять что его нет через ошибку Error - myset.remove(3)  # {1, 2}
Но если нужно удалить элемент, не генерируя ошибку, если его нет в множества - myset.discard(3)
Удалить произвольный элемент, т.к. множества неупорядочены, можно через метод pop() - myset.pop()
Удалить все элементы множества можно методом clear() - myset.clear()  # set()
============================================






















